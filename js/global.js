// Generated by CoffeeScript 1.12.7
(function() {
  var Graphics,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var graphics;
    document.getElementById('loading').className = 'show';
    graphics = new Graphics();
  });

  Graphics = (function() {
    function Graphics() {
      this.loadModel = bind(this.loadModel, this);
      this.resize = bind(this.resize, this);
      this.render = bind(this.render, this);
      var i, j, light;
      this.settings = {
        camera_x: 0,
        camera_y: 500,
        camera_z: 1800,
        half_screen_x: window.innerWidth / 2,
        half_screen_y: window.innerHeight / 2,
        lookat_point: new THREE.Vector3(-1000, 300, 0)
      };
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
      this.camera.position.x = this.settings.camera_x;
      this.camera.position.y = this.settings.camera_y;
      this.camera.position.z = this.settings.camera_z;
      this.loadModel('3d/pien.json', 'textures/branch_baked.jpg');
      for (i = j = 1; j <= 10; i = ++j) {
        this.loadModel('3d/m' + i + '.json', 'textures/m' + i + '.png');
      }
      light = new THREE.DirectionalLight(0xffffff, 0.1);
      this.scene.add(light);
      if (Detector.webgl) {
        this.renderer = new THREE.WebGLRenderer();
      } else {
        this.renderer = new THREE.CanvasRenderer();
      }
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.setClearColor(0xffffff, 0);
      this.clock = new THREE.Clock();
      this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
      this.controls.autoRotate = true;
      this.controls.rotateSpeed = 0.01;
      this.controls.target = new THREE.Vector3(0, 300, 0);
      this.controls.mouseButtons = {};
      this.controls.enableZoom = false;
      this.controls.enableRotate = false;
      this.controls.enablePan = false;
      document.body.appendChild(this.renderer.domElement);
      setTimeout((function(_this) {
        return function() {
          return _this.renderer.domElement.className = 'show';
        };
      })(this), 500);
      window.addEventListener('resize', (function(_this) {
        return function() {
          return _this.resize();
        };
      })(this), false);
      this.render();
      return;
    }

    Graphics.prototype.render = function() {
      var delta;
      requestAnimationFrame(this.render);
      delta = this.clock.getDelta();
      this.controls.update(delta);
      this.renderer.render(this.scene, this.camera);
    };

    Graphics.prototype.resize = function() {
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      this.settings.half_screen_x = window.innerWidth / 2;
      this.settings.half_screen_y = window.innerHeight / 2;
    };

    Graphics.prototype.loadModel = function(src, texture_src) {
      var loader;
      loader = new THREE.BufferGeometryLoader();
      loader.load(src, (function(_this) {
        return function(geometry) {
          var texture_loader;
          texture_loader = new THREE.TextureLoader();
          texture_loader.load(texture_src, function(texture) {
            var material, object;
            material = new THREE.MeshBasicMaterial({
              map: texture,
              overdraw: 0.5
            });
            object = new THREE.Mesh(geometry, material);
            object.scale.set(200, 200, 200);
            object.position.z = 100;
            _this.scene.add(object);
          });
        };
      })(this));
    };

    return Graphics;

  })();

}).call(this);
